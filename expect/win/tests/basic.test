# Commands covered: test basic expect functionality
#
# This file contains a collection of tests for one or more of the Expect
# command capabilities.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1997 Mitel, Inc.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: $Header: /disk/3/CVSROOT/Mitel/expect/win/tests/basic.test,v 1.8 1998/08/28 22:29:51 chaffee Exp $

if {[string compare test [info procs test]] == 1} then {source defs}

catch {unset a}
catch {unset x}

if {0} {
test basic-1.0 {basic tests} {
    if [catch {
	set spawn_id exp_user
	send -null
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.1 {basic tests} {
    if [catch {
	spawn ftp
	set id1 $spawn_id
	spawn ftp
	set id2 $spawn_id
	close -i $id1
	close -i $id2
	wait -i $id2
	wait -i $id1
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.2 {test of any_spawn_id} {
    set timeout -1
    spawn ftp
    set id1 $spawn_id
    spawn ftp
    set id2 $spawn_id

    set ok 0
    expect {
	-i "$id1" crap1 {}
	-i "$any_spawn_id" "ftp> " {set ok 1}
    }
    close -i $id1
    close -i $id2
    wait -i $id1
    wait -i $id2
    set ok
} {1}

test basic-1.3 {test of spawn -open} {
    if [catch {
	set f [open "defs"]
	spawn -open $f
	set id1 $spawn_id
	close -i $id1
	catch {close $f} errmsg
	if {! [regexp "can not find channel *" $errmsg]} {
	    error "spawn -open not working properly"
	}
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.4 {test of spawn -leaveopen} {
    if [catch {
	set f [open "defs"]
	spawn -leaveopen $f
	set id1 $spawn_id
	spawn -leaveopen $f
	set id2 $spawn_id
	close -i $id1
	close $f
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.5 {test of expect eof} {
    if [catch {
	spawn ipconfig.exe
	expect {
	    "crap" {puts crap; error "unexpected crap"}
	    timeout {puts timeout; error "unexpected timeout"}
	    eof {set ok 1}
	}
	# No close since we saw an eof
	wait
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.6 {test of expect timeout} {
    if [catch {
	set timeout 3
	spawn ftp.exe
	expect {
	    "crap" {error "unexpected crap"}
	    eof {error "unexpected eof"}
	    timeout {set ok 1}
	}
	close
	wait
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.7 {test of spawn -pipes} {
    if [catch {
	set timeout 3
	spawn -pipes ftp.exe
	expect {
	    "ftp> " {set ok 1}
	    eof {error "unexpected eof"}
	    timeout {error "unexpected timeout"}
	}
	close
	wait
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.8 {test of spawn -pipes} {
    # exp_internal -f dbg.log 1
    if [catch {
	set timeout 3
	spawn -pipes testa2.exe

	expect { 
	    -re "^Msg1 to stderr\r\n"	{set ok 1}
	    default  {error "unexpected bad match: looking for Msg1 to stderr" }
	    timeout  {error "unexpected timeout: looking for Msg1 to stderr" }
	    eof      {error "unexpected eof: looking for Msg1 to stderr" }
	}
	expect { 
	    -re "^Msg1 to stdout\r\n"	{set ok 1} 
	    default  {error "unexpected bad match: looking for Msg1 to stdout" }
	    timeout  {error "unexpected timeout: looking for Msg1 to stdout" }
	    eof      {error "unexpected eof: looking for Msg1 to stdout" }
	}
	expect { 
	    -re "^Msg2 to stdout\r\n"	{set ok 1} 
	    default  {error "unexpected bad match: looking for Msg2 to stdout" }
	    timeout  {error "unexpected timeout: looking for Msg2 to stdout" }
	    eof      {error "unexpected eof: looking for Msg2 to stdout" }
	}
	expect { 
	    -re "^Msg2 to stderr\r\n"	{set ok 1}
	    default  {error "unexpected bad match: looking for Msg2 to stderr" }
	    timeout  {error "unexpected timeout: looking for Msg2 to stderr" }
	    eof      {error "unexpected eof: looking for Msg2 to stderr" }
	}
	expect { 
	    -re "^Msg3 to stderr\r\n"	{set ok 1}
	    default  {error "unexpected bad match: looking for Msg3 to stderr" }
	    timeout  {error "unexpected timeout: looking for Msg3 to stderr" }
	    eof      {error "unexpected eof: looking for Msg3 to stderr" }
	}
	expect { 
	    -re "^Msg3 to stdout\r\n"	{set ok 1} 
	    default  {error "unexpected bad match: looking for Msg3 to stdout" }
	    timeout  {error "unexpected timeout: looking for Msg3 to stdout" }
	    eof      {error "unexpected eof: looking for Msg3 to stdout" }
	}
	expect { 
	    eof {set ok 1} 
	    timeout  {error "unexpected timeout: looking for eof" }
	}
	wait
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.9 {test send_user} {
    if [catch {
	send_user ""
    } msg] {set msg} else {set ok 1}
} {1}

test basic-1.10 {send -i} {
    if [catch {
	spawn ftp
	set id1 $spawn_id
	spawn ftp
	set id2 $spawn_id
	send -i $id1 "nothing\r"
	send -i $id2 "something\r"
	close -i $id1
	close -i $id2
	wait -i $id2
	wait -i $id1
    } msg] {set msg} else {set ok 1}
} {1}

}
test basic-1.11 {test of spawn -socket} {
    if [catch {
	set timeout 3
	spawn -socket ftp.exe
	expect {
	    "ftp> " {set ok 1}
	    eof {error "unexpected eof"}
	    timeout {error "unexpected timeout"}
	}
    } msg] {} else {set msg $ok}
    catch {close}
    catch {wait}
    set msg
} {1}

